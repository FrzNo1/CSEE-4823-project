/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2024  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname RF1SHD -words 256 -bits 20 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RF1SHD
 *      Words:          256
 *      Word Width:     20
 *      Mux:            2
 *      Corner:        ff_1p65v_125c
 *
 *      Creation Date:  2024-11-22 23:20:06Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-11-22 23:20:06Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2024 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.650;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p65v_125c) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.650;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p65v_125c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(RF1SHD_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(RF1SHD_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RF1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 20;
		bit_from : 19;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(RF1SHD) {
	area		 : 31681.761;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 20;
	}
        bus(Q)   {
                bus_type : RF1SHD_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.630, 0.639, 0.648, 0.671, 0.731, 0.827, 0.928", \
                          "0.653, 0.662, 0.672, 0.694, 0.754, 0.850, 0.951", \
                          "0.683, 0.692, 0.701, 0.724, 0.783, 0.880, 0.981", \
                          "0.741, 0.751, 0.760, 0.783, 0.842, 0.939, 1.040", \
                          "0.918, 0.927, 0.936, 0.959, 1.019, 1.115, 1.216", \
                          "1.212, 1.221, 1.230, 1.253, 1.313, 1.409, 1.510", \
                          "1.506, 1.515, 1.525, 1.548, 1.607, 1.703, 1.804" \
                        )
                        }
                        rise_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.024, 0.048, 0.073, 0.133, 0.291, 0.545, 0.811")
                        }
                        cell_fall(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.630, 0.639, 0.648, 0.671, 0.731, 0.827, 0.928", \
                          "0.653, 0.662, 0.672, 0.694, 0.754, 0.850, 0.951", \
                          "0.683, 0.692, 0.701, 0.724, 0.783, 0.880, 0.981", \
                          "0.741, 0.751, 0.760, 0.783, 0.842, 0.939, 1.040", \
                          "0.918, 0.927, 0.936, 0.959, 1.019, 1.115, 1.216", \
                          "1.212, 1.221, 1.230, 1.253, 1.313, 1.409, 1.510", \
                          "1.506, 1.515, 1.525, 1.548, 1.607, 1.703, 1.804" \
                        )
                        }
                        fall_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.024, 0.052, 0.079, 0.148, 0.326, 0.614, 0.915")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.055;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.165 ;
                min_pulse_width_low  : 0.175 ;
                min_period           : 1.517 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("32.255, 32.255")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("28.702, 28.702")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.130, 0.130")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.200, 0.221, 0.248, 0.302, 0.464, 0.734, 1.004", \
                          "0.176, 0.198, 0.225, 0.279, 0.441, 0.711, 0.980", \
                          "0.147, 0.168, 0.195, 0.249, 0.411, 0.681, 0.951", \
                          "0.088, 0.109, 0.136, 0.190, 0.352, 0.622, 0.892", \
                          "-0.089, -0.067, -0.040, 0.014, 0.176, 0.446, 0.716", \
                          "-0.383, -0.361, -0.334, -0.280, -0.118, 0.152, 0.422", \
                          "-0.677, -0.655, -0.628, -0.574, -0.412, -0.143, 0.127" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.184, 0.208, 0.238, 0.299, 0.482, 0.786, 1.090", \
                          "0.160, 0.185, 0.215, 0.276, 0.458, 0.763, 1.067", \
                          "0.131, 0.155, 0.186, 0.246, 0.429, 0.733, 1.037", \
                          "0.072, 0.096, 0.127, 0.188, 0.370, 0.674, 0.978", \
                          "-0.105, -0.080, -0.050, 0.011, 0.194, 0.498, 0.802", \
                          "-0.399, -0.374, -0.344, -0.283, -0.101, 0.204, 0.508", \
                          "-0.693, -0.669, -0.638, -0.577, -0.395, -0.091, 0.214" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.176, 0.155, 0.128, 0.074, 0.000, 0.000, 0.000", \
                          "0.471, 0.449, 0.422, 0.368, 0.206, 0.000, 0.000", \
                          "0.765, 0.743, 0.716, 0.662, 0.500, 0.230, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.166, 0.141, 0.111, 0.050, 0.000, 0.000, 0.000", \
                          "0.460, 0.435, 0.405, 0.344, 0.162, 0.000, 0.000", \
                          "0.754, 0.730, 0.699, 0.638, 0.456, 0.152, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.166, 0.191, 0.223, 0.285, 0.472, 0.785, 1.097", \
                          "0.143, 0.168, 0.199, 0.261, 0.449, 0.761, 1.074", \
                          "0.113, 0.138, 0.170, 0.232, 0.419, 0.732, 1.044", \
                          "0.055, 0.080, 0.111, 0.173, 0.361, 0.673, 0.985", \
                          "-0.122, -0.097, -0.066, -0.003, 0.184, 0.496, 0.809", \
                          "-0.416, -0.391, -0.360, -0.297, -0.110, 0.202, 0.515", \
                          "-0.710, -0.685, -0.654, -0.592, -0.404, -0.092, 0.220" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.197, 0.217, 0.242, 0.292, 0.441, 0.690, 0.939", \
                          "0.174, 0.194, 0.218, 0.268, 0.418, 0.667, 0.916", \
                          "0.144, 0.164, 0.189, 0.239, 0.388, 0.637, 0.886", \
                          "0.085, 0.105, 0.130, 0.180, 0.329, 0.578, 0.827", \
                          "-0.091, -0.071, -0.046, 0.003, 0.153, 0.402, 0.651", \
                          "-0.385, -0.365, -0.340, -0.291, -0.141, 0.108, 0.357", \
                          "-0.679, -0.660, -0.635, -0.585, -0.435, -0.186, 0.063" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.009, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.039, 0.014, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.098, 0.073, 0.041, 0.000, 0.000, 0.000, 0.000", \
                          "0.274, 0.249, 0.218, 0.155, 0.000, 0.000, 0.000", \
                          "0.568, 0.543, 0.512, 0.450, 0.262, 0.000, 0.000", \
                          "0.862, 0.837, 0.806, 0.744, 0.556, 0.244, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.028, 0.008, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.087, 0.067, 0.042, 0.000, 0.000, 0.000, 0.000", \
                          "0.264, 0.244, 0.219, 0.169, 0.020, 0.000, 0.000", \
                          "0.558, 0.538, 0.513, 0.463, 0.314, 0.065, 0.000", \
                          "0.852, 0.832, 0.807, 0.757, 0.608, 0.359, 0.110" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : RF1SHD_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.240, 0.266, 0.300, 0.366, 0.566, 0.899, 1.232", \
                          "0.216, 0.243, 0.276, 0.343, 0.542, 0.875, 1.208", \
                          "0.187, 0.213, 0.247, 0.313, 0.513, 0.846, 1.179", \
                          "0.128, 0.154, 0.188, 0.254, 0.454, 0.787, 1.120", \
                          "-0.049, -0.022, 0.011, 0.078, 0.278, 0.611, 0.943", \
                          "-0.343, -0.316, -0.283, -0.216, -0.017, 0.316, 0.649", \
                          "-0.637, -0.610, -0.577, -0.510, -0.311, 0.022, 0.355" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.134, 0.158, 0.188, 0.249, 0.431, 0.734, 1.037", \
                          "0.110, 0.134, 0.165, 0.225, 0.407, 0.710, 1.013", \
                          "0.081, 0.105, 0.135, 0.196, 0.378, 0.681, 0.984", \
                          "0.022, 0.046, 0.076, 0.137, 0.319, 0.622, 0.925", \
                          "-0.155, -0.130, -0.100, -0.039, 0.142, 0.446, 0.749", \
                          "-0.449, -0.425, -0.394, -0.334, -0.152, 0.151, 0.455", \
                          "-0.743, -0.719, -0.688, -0.628, -0.446, -0.143, 0.160" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.021, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.051, 0.024, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.109, 0.083, 0.049, 0.000, 0.000, 0.000, 0.000", \
                          "0.286, 0.259, 0.226, 0.159, 0.000, 0.000, 0.000", \
                          "0.580, 0.553, 0.520, 0.454, 0.254, 0.000, 0.000", \
                          "0.874, 0.848, 0.814, 0.748, 0.548, 0.215, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.012, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.035, 0.011, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.065, 0.041, 0.010, 0.000, 0.000, 0.000, 0.000", \
                          "0.124, 0.099, 0.069, 0.008, 0.000, 0.000, 0.000", \
                          "0.300, 0.276, 0.246, 0.185, 0.003, 0.000, 0.000", \
                          "0.594, 0.570, 0.540, 0.479, 0.297, 0.000, 0.000", \
                          "0.888, 0.864, 0.834, 0.773, 0.591, 0.288, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.268, 0.268")
                        }
                        fall_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.268, 0.268")
                        }
                }
        }
        bus(D)   {
                bus_type : RF1SHD_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.067, 0.090, 0.119, 0.177, 0.352, 0.642, 0.933", \
                          "0.043, 0.067, 0.096, 0.154, 0.328, 0.619, 0.909", \
                          "0.014, 0.037, 0.066, 0.124, 0.299, 0.589, 0.880", \
                          "-0.045, -0.022, 0.007, 0.065, 0.240, 0.530, 0.821", \
                          "-0.221, -0.198, -0.169, -0.111, 0.063, 0.354, 0.644", \
                          "-0.516, -0.492, -0.463, -0.405, -0.231, 0.060, 0.350", \
                          "-0.810, -0.787, -0.757, -0.699, -0.525, -0.235, 0.056" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.096, 0.119, 0.148, 0.207, 0.382, 0.675, 0.968", \
                          "0.072, 0.096, 0.125, 0.183, 0.359, 0.652, 0.944", \
                          "0.043, 0.066, 0.095, 0.154, 0.329, 0.622, 0.915", \
                          "-0.016, 0.007, 0.037, 0.095, 0.271, 0.563, 0.856", \
                          "-0.193, -0.169, -0.140, -0.081, 0.094, 0.387, 0.679", \
                          "-0.487, -0.463, -0.434, -0.376, -0.200, 0.093, 0.385", \
                          "-0.781, -0.758, -0.728, -0.670, -0.494, -0.202, 0.091" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.091, 0.067, 0.038, 0.000, 0.000, 0.000, 0.000", \
                          "0.114, 0.091, 0.062, 0.004, 0.000, 0.000, 0.000", \
                          "0.144, 0.120, 0.091, 0.033, 0.000, 0.000, 0.000", \
                          "0.202, 0.179, 0.150, 0.092, 0.000, 0.000, 0.000", \
                          "0.379, 0.356, 0.327, 0.269, 0.094, 0.000, 0.000", \
                          "0.673, 0.650, 0.621, 0.563, 0.388, 0.098, 0.000", \
                          "0.967, 0.944, 0.915, 0.857, 0.683, 0.392, 0.101" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.015, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.074, 0.050, 0.021, 0.000, 0.000, 0.000, 0.000", \
                          "0.250, 0.227, 0.197, 0.139, 0.000, 0.000, 0.000", \
                          "0.544, 0.521, 0.492, 0.433, 0.257, 0.000, 0.000", \
                          "0.838, 0.815, 0.786, 0.727, 0.552, 0.259, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 2.76E-2;
}
}
