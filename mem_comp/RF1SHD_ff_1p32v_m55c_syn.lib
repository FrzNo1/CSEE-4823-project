/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2024  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname RF1SHD -words 256 -bits 20 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  RF1SHD
 *      Words:          256
 *      Word Width:     20
 *      Mux:            2
 *      Corner:        ff_1p32v_m55c
 *
 *      Creation Date:  2024-11-22 23:20:06Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-11-22 23:20:06Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2024 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -55.000;
	nom_voltage		: 1.320;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p32v_m55c) {
		process	 : 1;
		temperature	 : -55.000;
		voltage	 : 1.320;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p32v_m55c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(RF1SHD_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(RF1SHD_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(RF1SHD_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(RF1SHD_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(RF1SHD_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (RF1SHD_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 20;
		bit_from : 19;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (RF1SHD_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(RF1SHD) {
	area		 : 31681.761;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 20;
	}
        bus(Q)   {
                bus_type : RF1SHD_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.749, 0.760, 0.771, 0.797, 0.866, 0.978, 1.095", \
                          "0.778, 0.789, 0.799, 0.826, 0.895, 1.006, 1.123", \
                          "0.814, 0.824, 0.835, 0.862, 0.931, 1.042, 1.159", \
                          "0.886, 0.896, 0.907, 0.933, 1.002, 1.114, 1.231", \
                          "1.101, 1.111, 1.122, 1.148, 1.217, 1.329, 1.446", \
                          "1.459, 1.470, 1.480, 1.507, 1.576, 1.687, 1.804", \
                          "1.817, 1.828, 1.838, 1.865, 1.934, 2.046, 2.163" \
                        )
                        }
                        rise_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.021, 0.048, 0.074, 0.140, 0.311, 0.588, 0.878")
                        }
                        cell_fall(RF1SHD_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.749, 0.760, 0.771, 0.797, 0.866, 0.978, 1.095", \
                          "0.778, 0.789, 0.799, 0.826, 0.895, 1.006, 1.123", \
                          "0.814, 0.824, 0.835, 0.862, 0.931, 1.042, 1.159", \
                          "0.886, 0.896, 0.907, 0.933, 1.002, 1.114, 1.231", \
                          "1.101, 1.111, 1.122, 1.148, 1.217, 1.329, 1.446", \
                          "1.459, 1.470, 1.480, 1.507, 1.576, 1.687, 1.804", \
                          "1.817, 1.828, 1.838, 1.865, 1.934, 2.046, 2.163" \
                        )
                        }
                        fall_transition(RF1SHD_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.023, 0.053, 0.082, 0.155, 0.345, 0.651, 0.972")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.054;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.175 ;
                min_pulse_width_low  : 0.204 ;
                min_period           : 1.606 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("19.573, 19.573")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("17.677, 17.677")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.068, 0.068")
                        }
                        fall_power(RF1SHD_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.198, 0.221, 0.250, 0.308, 0.480, 0.768, 1.055", \
                          "0.170, 0.193, 0.221, 0.279, 0.451, 0.739, 1.027", \
                          "0.134, 0.157, 0.186, 0.243, 0.416, 0.703, 0.991", \
                          "0.062, 0.085, 0.114, 0.171, 0.344, 0.632, 0.919", \
                          "-0.153, -0.130, -0.101, -0.044, 0.129, 0.416, 0.704", \
                          "-0.511, -0.488, -0.460, -0.402, -0.229, 0.058, 0.346", \
                          "-0.870, -0.847, -0.818, -0.760, -0.588, -0.300, -0.013" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.222, 0.248, 0.279, 0.343, 0.534, 0.852, 1.170", \
                          "0.193, 0.219, 0.251, 0.314, 0.505, 0.823, 1.142", \
                          "0.158, 0.183, 0.215, 0.278, 0.469, 0.788, 1.106", \
                          "0.086, 0.111, 0.143, 0.207, 0.398, 0.716, 1.034", \
                          "-0.129, -0.104, -0.072, -0.008, 0.183, 0.501, 0.819", \
                          "-0.487, -0.462, -0.430, -0.367, -0.176, 0.143, 0.461", \
                          "-0.846, -0.820, -0.789, -0.725, -0.534, -0.216, 0.102" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.212, 0.188, 0.160, 0.102, 0.000, 0.000, 0.000", \
                          "0.570, 0.547, 0.518, 0.461, 0.288, 0.000, 0.000", \
                          "0.928, 0.905, 0.876, 0.819, 0.646, 0.359, 0.071" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.229, 0.204, 0.172, 0.108, 0.000, 0.000, 0.000", \
                          "0.588, 0.562, 0.530, 0.467, 0.276, 0.000, 0.000", \
                          "0.946, 0.921, 0.889, 0.825, 0.634, 0.316, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.184, 0.212, 0.247, 0.318, 0.529, 0.882, 1.234", \
                          "0.155, 0.183, 0.219, 0.289, 0.501, 0.853, 1.206", \
                          "0.119, 0.147, 0.183, 0.253, 0.465, 0.817, 1.170", \
                          "0.048, 0.076, 0.111, 0.182, 0.393, 0.746, 1.098", \
                          "-0.167, -0.139, -0.104, -0.033, 0.178, 0.531, 0.883", \
                          "-0.526, -0.498, -0.462, -0.392, -0.180, 0.172, 0.525", \
                          "-0.884, -0.856, -0.821, -0.750, -0.539, -0.186, 0.167" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.241, 0.264, 0.293, 0.351, 0.525, 0.815, 1.105", \
                          "0.213, 0.236, 0.265, 0.323, 0.497, 0.787, 1.077", \
                          "0.177, 0.200, 0.229, 0.287, 0.461, 0.751, 1.041", \
                          "0.105, 0.128, 0.157, 0.215, 0.389, 0.679, 0.969", \
                          "-0.110, -0.087, -0.058, 0.000, 0.174, 0.464, 0.754", \
                          "-0.468, -0.445, -0.416, -0.358, -0.184, 0.106, 0.396", \
                          "-0.827, -0.803, -0.774, -0.716, -0.542, -0.253, 0.037" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.046, 0.018, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.118, 0.090, 0.054, 0.000, 0.000, 0.000, 0.000", \
                          "0.333, 0.305, 0.269, 0.199, 0.000, 0.000, 0.000", \
                          "0.691, 0.663, 0.628, 0.557, 0.346, 0.000, 0.000", \
                          "1.050, 1.021, 0.986, 0.916, 0.704, 0.351, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.026, 0.003, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.098, 0.074, 0.045, 0.000, 0.000, 0.000, 0.000", \
                          "0.313, 0.289, 0.260, 0.202, 0.028, 0.000, 0.000", \
                          "0.671, 0.648, 0.619, 0.561, 0.387, 0.097, 0.000", \
                          "1.029, 1.006, 0.977, 0.919, 0.745, 0.455, 0.165" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : RF1SHD_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.321, 0.353, 0.393, 0.472, 0.709, 1.105, 1.502", \
                          "0.293, 0.324, 0.364, 0.443, 0.681, 1.077, 1.473", \
                          "0.257, 0.288, 0.328, 0.407, 0.645, 1.041, 1.437", \
                          "0.185, 0.217, 0.256, 0.336, 0.573, 0.969, 1.365", \
                          "-0.030, 0.002, 0.041, 0.121, 0.358, 0.754, 1.150", \
                          "-0.388, -0.357, -0.317, -0.238, -0.000, 0.396, 0.792", \
                          "-0.747, -0.715, -0.675, -0.596, -0.359, 0.038, 0.434" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.120, 0.149, 0.186, 0.259, 0.478, 0.844, 1.210", \
                          "0.091, 0.121, 0.157, 0.230, 0.450, 0.815, 1.181", \
                          "0.055, 0.085, 0.121, 0.194, 0.414, 0.780, 1.145", \
                          "-0.016, 0.013, 0.050, 0.123, 0.342, 0.708, 1.074", \
                          "-0.231, -0.202, -0.165, -0.092, 0.127, 0.493, 0.858", \
                          "-0.590, -0.560, -0.524, -0.451, -0.231, 0.134, 0.500", \
                          "-0.948, -0.919, -0.882, -0.809, -0.590, -0.224, 0.142" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.021, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.057, 0.026, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.129, 0.097, 0.058, 0.000, 0.000, 0.000, 0.000", \
                          "0.344, 0.312, 0.273, 0.193, 0.000, 0.000, 0.000", \
                          "0.702, 0.671, 0.631, 0.552, 0.314, 0.000, 0.000", \
                          "1.061, 1.029, 0.989, 0.910, 0.673, 0.276, 0.000" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.007, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.035, 0.006, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.071, 0.042, 0.005, 0.000, 0.000, 0.000, 0.000", \
                          "0.143, 0.114, 0.077, 0.004, 0.000, 0.000, 0.000", \
                          "0.358, 0.329, 0.292, 0.219, 0.000, 0.000, 0.000", \
                          "0.716, 0.687, 0.651, 0.577, 0.358, 0.000, 0.000", \
                          "1.075, 1.045, 1.009, 0.936, 0.716, 0.351, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.161, 0.161")
                        }
                        fall_power(RF1SHD_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.161, 0.161")
                        }
                }
        }
        bus(D)   {
                bus_type : RF1SHD_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.067, 0.093, 0.125, 0.189, 0.382, 0.702, 1.023", \
                          "0.039, 0.064, 0.097, 0.161, 0.353, 0.674, 0.994", \
                          "0.003, 0.029, 0.061, 0.125, 0.317, 0.638, 0.958", \
                          "-0.069, -0.043, -0.011, 0.053, 0.245, 0.566, 0.887", \
                          "-0.284, -0.258, -0.226, -0.162, 0.030, 0.351, 0.672", \
                          "-0.642, -0.616, -0.584, -0.520, -0.328, -0.007, 0.313", \
                          "-1.000, -0.975, -0.943, -0.879, -0.686, -0.366, -0.045" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.125, 0.150, 0.181, 0.244, 0.430, 0.741, 1.052", \
                          "0.097, 0.122, 0.153, 0.215, 0.402, 0.713, 1.024", \
                          "0.061, 0.086, 0.117, 0.179, 0.366, 0.677, 0.988", \
                          "-0.011, 0.014, 0.045, 0.107, 0.294, 0.605, 0.916", \
                          "-0.226, -0.201, -0.170, -0.108, 0.079, 0.390, 0.701", \
                          "-0.584, -0.559, -0.528, -0.466, -0.279, 0.032, 0.343", \
                          "-0.943, -0.918, -0.887, -0.824, -0.638, -0.327, -0.016" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.089, 0.064, 0.032, 0.000, 0.000, 0.000, 0.000", \
                          "0.118, 0.092, 0.060, 0.000, 0.000, 0.000, 0.000", \
                          "0.154, 0.128, 0.096, 0.032, 0.000, 0.000, 0.000", \
                          "0.226, 0.200, 0.168, 0.104, 0.000, 0.000, 0.000", \
                          "0.441, 0.415, 0.383, 0.319, 0.126, 0.000, 0.000", \
                          "0.799, 0.773, 0.741, 0.677, 0.485, 0.164, 0.000", \
                          "1.157, 1.132, 1.100, 1.035, 0.843, 0.522, 0.202" \
                        )
                        }
                        fall_constraint(RF1SHD_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.023, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.094, 0.070, 0.038, 0.000, 0.000, 0.000, 0.000", \
                          "0.310, 0.285, 0.254, 0.191, 0.005, 0.000, 0.000", \
                          "0.668, 0.643, 0.612, 0.550, 0.363, 0.052, 0.000", \
                          "1.026, 1.001, 0.970, 0.908, 0.721, 0.410, 0.099" \
                        )
                        }
               }
        }

        cell_leakage_power : 8.98E-5;
}
}
